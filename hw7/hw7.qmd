---
title: Homework 7 - Creating a resume database
author: Emma Carlson
date: 11.09.2023
format:
    html:
        theme: flatly
        toc: true
        embed-resources: true
        code-copy: true
---

This document is the deliverable for homework 7 in CMSC 508. A database, tables, and tuples are all created, and SQL queries on the data are executed.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-emmacarl7>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError, SQLAlchemyError, NoSuchModuleError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except SQLAlchemyError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project reflects **a database for KB Co.** -- a group of cushy real-estate designers and developers by day, and furtive thieves by night. This database provides a resume for all employees of KB Co., combining both their professional and *professional* skillsets. 

The database provides lists, filtered queries, and sorts of employees (referred to in the db as **people**), their thievery **skills**, and their company **roles**.


## Crows-foot diagram

This crows-foot diagram displays the relationship between entities in the database. The primary relationships include the **people** and the **skills** and **roles** they have. Also included are supplementary entities **peopleskills** and **peopleroles**, which group people with skills and roles respectively, to provide useful ways to analyze the data.

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o{ SKILLS : have
    PEOPLE ||--o{ ROLES : have

    PEOPLE o{--o{ PEOPLEROLES : in
    ROLES o{--o{ PEOPLEROLES : in

    PEOPLE o{--o{ PEOPLESKILLS : in
    SKILLS o{--o{ PEOPLESKILLS : in
    
    PEOPLE{
        int id
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }

    SKILLS{
        int id
        string name
        string description
        string tag
        string url
        int time_commitment
    }

    ROLES{
      int id
      string name
      int sort_priority
    }

    PEOPLESKILLS{
      int id
      int skills_id
      int people_id
      date date_acquired
    }

    PEOPLEROLES{
      int id
      int people_id
      int role_id
      date date_assigned
    }
```

## Examples of data in the database

### People table

The **people** table contains information for the employees that work at KB Co.. Attributes include first name, last name, date started, a brief bio, and contact info: email addresses, linkedin and headshot urls, and discord handles. 

Below is a list of data in the **people** table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The **skills** table describes the unique skills this company seeks. Each skill has a name and a brief description about that skill. Also included is a url for more info.

Below is a list of data in the **skills** table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The **roles** table contains elements that describe the roles employees can take on at this company. Each role has a name and a priority code associated with it. 

Below is a list of data in the **roles** table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
SELECT name, tag, description 
FROM skills 
ORDER BY name
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT first_name, last_name, email 
FROM people
ORDER BY last_name
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1
```{python}
sql = f"""
SELECT name AS skill_name, people.first_name, people.last_name
FROM peopleskills 
JOIN skills ON peopleskills.skills_id = skills.id
JOIN people ON peopleskills.people_id = people.id
WHERE people.last_name = 'Person 1';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names with Skill 6
```{python}
sql = f"""
SELECT skills.id AS skills_id, people.first_name, people.last_name
FROM people
JOIN peopleskills ON people.id = peopleskills.people_id
JOIN skills ON peopleskills.skills_id = skills.id
WHERE skills.id = 6;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people with a DEVELOPER role
```{python}
sql = f"""
SELECT roles.name as role_name, people.first_name, people.last_name
FROM people
JOIN peopleroles ON people.id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
WHERE roles.name = 'Developer';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT people.first_name, people.last_name, people.email
FROM people
LEFT JOIN peopleskills ON people.id = peopleskills.people_id
WHERE peopleskills.people_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List names and tags of unused skills
```{python}
sql = f"""
SELECT name, tag
FROM skills
LEFT JOIN peopleskills ON skills.id = peopleskills.skills_id
WHERE peopleskills.skills_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and skill names with the BOSS role
```{python}
sql = f"""
SELECT roles.name as role_name, people.first_name, people.last_name, skills.name AS skill_name 
FROM people
JOIN peopleroles ON people.id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
LEFT JOIN peopleskills ON people.id = peopleskills.people_id
LEFT JOIN skills ON peopleskills.skills_id = skills.id
WHERE roles.name = 'BOSS';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List ids and names of unused roles
```{python}
sql = f"""
SELECT roles.id as role_id, roles.name as role_name
FROM roles
LEFT JOIN peopleroles ON roles.id = peopleroles.role_id
WHERE
peopleroles.role_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


## Reflection

(Write a paragraph expressing your thoughts, feelings, and insights about your experience with this assignment.  Pause and breath before writing - I'm trying to encourage critical thinking and self-awareness while allowing you to explore the connections between theory and practice. And yes, delete this paragraph.)

